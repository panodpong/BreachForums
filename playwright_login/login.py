import asyncio
from playwright.async_api import async_playwright
import json
import os
import random

USERNAME = "solomonaspire2323"
PASSWORD = "Password1234scrapy"
LOGIN_URL = "https://breachforums.st/member?action=login"

# ‡∏à‡∏∞‡πÄ‡∏Å‡πá‡∏ö cookies ‡πÑ‡∏ß‡πâ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
COOKIES_FILE = os.path.join(os.path.dirname(__file__), "..", "cookies.json")

async def run():
    async with async_playwright() as p:
        browser = await p.chromium.launch(headless=False, args=["--disable-blink-features=AutomationControlled"])
        context = await browser.new_context(
            user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64)",
            viewport={"width": 1280, "height": 800},
            java_script_enabled=True,
            ignore_https_errors=True
        )
        page = await context.new_page()

        # ‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤ Login ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á retry ‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß
        try:
            print("üåê ‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤ Login ...")
            await page.goto(LOGIN_URL, wait_until="networkidle", timeout=60000)
        except Exception as e:
            print(f"‚ö†Ô∏è ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
            return

        # ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞ CAPTCHA ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
        print(f"\nüîÅ Attempt 1/1")
        await page.mouse.move(500, 400)
        await asyncio.sleep(random.uniform(0.5, 1.5))

        await page.click('input[name="username"]')
        await page.keyboard.type(USERNAME, delay=random.randint(50, 150))
        await asyncio.sleep(random.uniform(0.3, 0.8))

        await page.click('input[name="password"]')
        await page.keyboard.type(PASSWORD, delay=random.randint(50, 150))
        await asyncio.sleep(random.uniform(1.2, 2.5))

        await page.wait_for_selector('img[src*="captcha"]')
        captcha_img = await page.query_selector('img[src*="captcha"]')
        captcha_bytes = await captcha_img.screenshot()

        with open(f"captcha_debug_attempt1.png", "wb") as f:
            f.write(captcha_bytes)
        print(f"üì∏ Saved CAPTCHA: captcha_debug_attempt1.png")

        # ‡∏Å‡∏£‡∏≠‡∏Å CAPTCHA ‡πÄ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
        captcha_text = input("üì• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å CAPTCHA ‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û captcha_debug_attempt1.png: ").strip()

        if not captcha_text or len(captcha_text) < 3:
            print("‚ö†Ô∏è CAPTCHA ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏±‡πâ‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ")
            captcha_text = "invalid"

        await page.fill('input#imagestring', captcha_text)
        await asyncio.sleep(random.uniform(1.0, 2.0))
        await page.click('input[type="submit"]')
        await page.wait_for_load_state("networkidle")

        title = await page.title()
        if "Login" not in title:
            print(f"üéâ Login successful! Page title: {title}")

            # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å cookies
            cookies = await context.cookies()
            with open(COOKIES_FILE, "w") as f:
                json.dump(cookies, f, indent=2)
            print(f"üç™ Cookies ‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà: {COOKIES_FILE}")

        else:
            print("‚ùå CAPTCHA incorrect or login failed.")

        print("\nüñ•Ô∏è Browser ‡∏à‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡∏Ñ‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå")
        input("üìå ‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î browser ‡πÅ‡∏•‡∏∞‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°...")
        await browser.close()

if __name__ == "__main__":
    asyncio.run(run())
